// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

import { Database, QueryExecResult } from "@stephen/sql.js";










const getUsersStmt = `-- name: getUsers :many
SELECT DISTINCT
    u.`+"`"+`id`+"`"+` AS user_id,
    uno.`+"`"+`name`+"`"+` AS user_name,
    coalesce(
        group_concat(
            olduno.`+"`"+`name`+"`"+`,
            ';'
        ),
        NULL
    ) AS old_user_names
FROM `+"`"+`users`+"`"+` u
LEFT JOIN `+"`"+`user_name_observations`+"`"+` AS uno
    ON uno.user_id = u.`+"`"+`id`+"`"+` AND uno.`+"`"+`id`+"`"+` = (
        SELECT MAX(uno2.`+"`"+`id`+"`"+`)
        FROM `+"`"+`user_name_observations`+"`"+` uno2
        WHERE uno2.`+"`"+`user_id`+"`"+` = u.`+"`"+`id`+"`"+`
    )
LEFT JOIN `+"`"+`user_name_observations`+"`"+` AS olduno
    ON olduno.`+"`"+`user_id`+"`"+` = u.id AND olduno.`+"`"+`id`+"`"+` != uno.`+"`"+`id`+"`"+`
WHERE 
  (uno.`+"`"+`name`+"`"+` = ?1 OR ?1 IS NULL)
  AND (uno.`+"`"+`name`+"`"+` LIKE ?2 OR ?2 IS NULL)
GROUP BY u.`+"`"+`id`+"`"+`
ORDER BY u.`+"`"+`id`+"`"+` ASC
LIMIT ?4
OFFSET ?3
`;


export type GetUsersParams = {
  userName: string | null;
  userNameLike: string | null;
  offset: number | null;
  maxCount: number | null;
}



export type GetUsersRow = {
  userId: string | null;
  userName: string | null;
  oldUserNames: unknown;
}





export function getUsers(db: Database, arg: GetUsersParams): GetUsersRow[] {
  const result = db.exec(getUsersStmt, [
arg.userName,
arg.userNameLike,
arg.offset,
arg.maxCount,
])
  if (result.length !== 1) {
    throw new Error("expected exec() to return a single query result")
  }

  const queryResult = result[0];
  const rvs: GetUsersRow[] = [];

  for (const row of queryResult.values) {
    
    
    if (typeof row[0] !== "string" && row[0] !== null) { throw new Error(`expected type string | null for column userId, but got ${typeof row[0]}`) };
    
    
    if (typeof row[1] !== "string" && row[1] !== null) { throw new Error(`expected type string | null for column userName, but got ${typeof row[1]}`) };
    
    
    const rv: GetUsersRow = {
      userId: row[0],
      userName: row[1],
      oldUserNames: row[2],
    };
    
    rvs.push(rv);
  }
  return rvs;
}











