// Code generated by sqlc. DO NOT EDIT.
// source: interactions.sql

import { Database, QueryExecResult } from "@stephen/sql.js";






const getInteractionsStmt = `-- name: getInteractions :many
SELECT
    g.`+"`"+`id`+"`"+` AS game_id,
    r.`+"`"+`round_number`+"`"+` AS round_number,
    m.`+"`"+`event`+"`"+` AS event,
    m.`+"`"+`text`+"`"+` AS text,
    COALESCE(GROUP_CONCAT(item.`+"`"+`name`+"`"+`, ';'), '') AS items,
    COALESCE(GROUP_CONCAT(uno.`+"`"+`name`+"`"+`, ';'), '') AS users
FROM `+"`"+`interactions`+"`"+` i
LEFT JOIN `+"`"+`rounds`+"`"+` r
    ON i.`+"`"+`round_id`+"`"+` = r.`+"`"+`id`+"`"+`
LEFT JOIN `+"`"+`games`+"`"+` g
    ON r.`+"`"+`game_id`+"`"+` = g.`+"`"+`id`+"`"+`
LEFT JOIN `+"`"+`interaction_messages`+"`"+` m
    ON i.`+"`"+`message_id`+"`"+` = m.`+"`"+`id`+"`"+`
LEFT JOIN `+"`"+`interaction_item_mappings`+"`"+` im
    ON i.`+"`"+`id`+"`"+` = im.`+"`"+`interaction_id`+"`"+`
LEFT JOIN `+"`"+`items`+"`"+` AS item
    ON im.`+"`"+`item_name`+"`"+` = item.`+"`"+`name`+"`"+`
LEFT JOIN `+"`"+`interaction_user_mention_mappings`+"`"+` umm
    ON i.`+"`"+`id`+"`"+` = umm.`+"`"+`interaction_id`+"`"+`
LEFT JOIN `+"`"+`interaction_user_mentions`+"`"+` um
    ON umm.`+"`"+`interaction_user_mention_id`+"`"+` = um.`+"`"+`id`+"`"+`
LEFT JOIN `+"`"+`users`+"`"+` AS u
    ON um.`+"`"+`user_id`+"`"+` = u.`+"`"+`id`+"`"+`
LEFT JOIN `+"`"+`user_name_observations`+"`"+` AS uno
    ON uno.`+"`"+`user_id`+"`"+` = u.`+"`"+`id`+"`"+` AND uno.`+"`"+`id`+"`"+` = (
        SELECT MAX(uno2.`+"`"+`id`+"`"+`)
        FROM `+"`"+`user_name_observations`+"`"+` uno2
        WHERE uno2.`+"`"+`user_id`+"`"+` = u.`+"`"+`id`+"`"+`)
WHERE
  (m.`+"`"+`text`+"`"+` = ?1 OR ?1 IS NULL)
  AND (m.`+"`"+`text`+"`"+` LIKE ?2 OR ?2 IS NULL)
  AND (item.`+"`"+`name`+"`"+` = ?3 OR ?3 IS NULL) 
  AND (u.`+"`"+`id`+"`"+` = ?4 OR ?4 IS NULL)
  AND (uno.`+"`"+`name`+"`"+` = ?5 OR ?5 IS NULL)
  AND (uno.`+"`"+`name`+"`"+` LIKE ?6 OR ?6 IS NULL)
GROUP BY i.`+"`"+`id`+"`"+`
ORDER BY i.`+"`"+`id`+"`"+` ASC
LIMIT ?8
OFFSET ?7
`;


export type GetInteractionsParams = {
  messageText: string | null;
  messageTextLike: string | null;
  itemName: string | null;
  userId: string | null;
  userName: string | null;
  userNameLike: string | null;
  offset: number | null;
  maxCount: number | null;
}



export type GetInteractionsRow = {
  gameId: number | null;
  roundNumber: number | null;
  event: string | null;
  text: string | null;
  items: unknown;
  users: unknown;
}





// Get list of interactions by game/round with affected players/items.
//
export function getInteractions(db: Database, arg: GetInteractionsParams): GetInteractionsRow[] {
  const result = db.exec(getInteractionsStmt, [
arg.messageText,
arg.messageTextLike,
arg.itemName,
arg.userId,
arg.userName,
arg.userNameLike,
arg.offset,
arg.maxCount,
])
  if (result.length !== 1) {
    throw new Error("expected exec() to return a single query result")
  }

  const queryResult = result[0];
  const rvs: GetInteractionsRow[] = [];

  for (const row of queryResult.values) {
    
    
    if (typeof row[0] !== "number" && row[0] !== null) { throw new Error(`expected type number | null for column gameId, but got ${typeof row[0]}`) };
    
    
    if (typeof row[1] !== "number" && row[1] !== null) { throw new Error(`expected type number | null for column roundNumber, but got ${typeof row[1]}`) };
    
    
    if (typeof row[2] !== "string" && row[2] !== null) { throw new Error(`expected type string | null for column event, but got ${typeof row[2]}`) };
    
    
    if (typeof row[3] !== "string" && row[3] !== null) { throw new Error(`expected type string | null for column text, but got ${typeof row[3]}`) };
    
    
    
    const rv: GetInteractionsRow = {
      gameId: row[0],
      roundNumber: row[1],
      event: row[2],
      text: row[3],
      items: row[4],
      users: row[5],
    };
    
    rvs.push(rv);
  }
  return rvs;
}















